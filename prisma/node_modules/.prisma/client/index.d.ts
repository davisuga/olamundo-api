import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.0
 * Query Engine version: 7d0087eadc7265e12d4b8d8c3516b02c4c965111
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **Lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): LessonDelegate;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): ExerciseDelegate;

  /**
   * `prisma.progress`: Exposes CRUD operations for the **Progress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Progresses
    * const progresses = await prisma.progress.findMany()
    * ```
    */
  get progress(): ProgressDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const UserDistinctFieldEnum: {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const LessonDistinctFieldEnum: {
  id: 'id',
  title: 'title',
  description: 'description',
  url: 'url'
};

export declare type LessonDistinctFieldEnum = (typeof LessonDistinctFieldEnum)[keyof typeof LessonDistinctFieldEnum]


export declare const ExerciseDistinctFieldEnum: {
  id: 'id',
  title: 'title',
  description: 'description',
  url: 'url',
  answer: 'answer',
  grade: 'grade'
};

export declare type ExerciseDistinctFieldEnum = (typeof ExerciseDistinctFieldEnum)[keyof typeof ExerciseDistinctFieldEnum]


export declare const ProgressDistinctFieldEnum: {
  id: 'id',
  user_id: 'user_id',
  start_id: 'start_id',
  final_grade: 'final_grade',
  end_datetime: 'end_datetime'
};

export declare type ProgressDistinctFieldEnum = (typeof ProgressDistinctFieldEnum)[keyof typeof ProgressDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model User
 */

export type User = {
  id: number
  email: string
  name: string
  password: string
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  email?: boolean
  name?: boolean
  password?: boolean
  progress?: boolean | ProgressArgs
}

export type UserInclude = {
  progress?: boolean | ProgressArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'progress'
      ? ProgressGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'progress'
      ? ProgressGetPayload<S['select'][P]> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  progress<T extends ProgressArgs = {}>(args?: Subset<T, ProgressArgs>): CheckSelect<T, Prisma__ProgressClient<Progress | null>, Prisma__ProgressClient<ProgressGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Model Lesson
 */

export type Lesson = {
  id: number
  title: string
  description: string
  url: string
}


export type AggregateLesson = {
  count: number
  avg: LessonAvgAggregateOutputType | null
  sum: LessonSumAggregateOutputType | null
  min: LessonMinAggregateOutputType | null
  max: LessonMaxAggregateOutputType | null
}

export type LessonAvgAggregateOutputType = {
  id: number
}

export type LessonSumAggregateOutputType = {
  id: number
}

export type LessonMinAggregateOutputType = {
  id: number
}

export type LessonMaxAggregateOutputType = {
  id: number
}


export type LessonAvgAggregateInputType = {
  id?: true
}

export type LessonSumAggregateInputType = {
  id?: true
}

export type LessonMinAggregateInputType = {
  id?: true
}

export type LessonMaxAggregateInputType = {
  id?: true
}

export type AggregateLessonArgs = {
  where?: LessonWhereInput
  orderBy?: Enumerable<LessonOrderByInput> | LessonOrderByInput
  cursor?: LessonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LessonDistinctFieldEnum>
  count?: true
  avg?: LessonAvgAggregateInputType
  sum?: LessonSumAggregateInputType
  min?: LessonMinAggregateInputType
  max?: LessonMaxAggregateInputType
}

export type GetLessonAggregateType<T extends AggregateLessonArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetLessonAggregateScalarType<T[P]>
}

export type GetLessonAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof LessonAvgAggregateOutputType ? LessonAvgAggregateOutputType[P] : never
}
    
    

export type LessonSelect = {
  id?: boolean
  title?: boolean
  description?: boolean
  url?: boolean
}

export type LessonGetPayload<
  S extends boolean | null | undefined | LessonArgs,
  U = keyof S
> = S extends true
  ? Lesson
  : S extends undefined
  ? never
  : S extends LessonArgs | FindManyLessonArgs
  ? 'include' extends U
    ? Lesson 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Lesson ? Lesson[P]
: 
 never
    }
  : Lesson
: Lesson


export interface LessonDelegate {
  /**
   * Find zero or one Lesson that matches the filter.
   * @param {FindOneLessonArgs} args - Arguments to find a Lesson
   * @example
   * // Get one Lesson
   * const lesson = await prisma.lesson.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLessonArgs>(
    args: Subset<T, FindOneLessonArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson | null>, Prisma__LessonClient<LessonGetPayload<T> | null>>
  /**
   * Find the first Lesson that matches the filter.
   * @param {FindFirstLessonArgs} args - Arguments to find a Lesson
   * @example
   * // Get one Lesson
   * const lesson = await prisma.lesson.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstLessonArgs>(
    args: Subset<T, FindFirstLessonArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson>, Prisma__LessonClient<LessonGetPayload<T>>>
  /**
   * Find zero or more Lessons that matches the filter.
   * @param {FindManyLessonArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Lessons
   * const lessons = await prisma.lesson.findMany()
   * 
   * // Get first 10 Lessons
   * const lessons = await prisma.lesson.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lessonWithIdOnly = await prisma.lesson.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyLessonArgs>(
    args?: Subset<T, FindManyLessonArgs>
  ): CheckSelect<T, Promise<Array<Lesson>>, Promise<Array<LessonGetPayload<T>>>>
  /**
   * Create a Lesson.
   * @param {LessonCreateArgs} args - Arguments to create a Lesson.
   * @example
   * // Create one Lesson
   * const Lesson = await prisma.lesson.create({
   *   data: {
   *     // ... data to create a Lesson
   *   }
   * })
   * 
  **/
  create<T extends LessonCreateArgs>(
    args: Subset<T, LessonCreateArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson>, Prisma__LessonClient<LessonGetPayload<T>>>
  /**
   * Delete a Lesson.
   * @param {LessonDeleteArgs} args - Arguments to delete one Lesson.
   * @example
   * // Delete one Lesson
   * const Lesson = await prisma.lesson.delete({
   *   where: {
   *     // ... filter to delete one Lesson
   *   }
   * })
   * 
  **/
  delete<T extends LessonDeleteArgs>(
    args: Subset<T, LessonDeleteArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson>, Prisma__LessonClient<LessonGetPayload<T>>>
  /**
   * Update one Lesson.
   * @param {LessonUpdateArgs} args - Arguments to update one Lesson.
   * @example
   * // Update one Lesson
   * const lesson = await prisma.lesson.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LessonUpdateArgs>(
    args: Subset<T, LessonUpdateArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson>, Prisma__LessonClient<LessonGetPayload<T>>>
  /**
   * Delete zero or more Lessons.
   * @param {LessonDeleteManyArgs} args - Arguments to filter Lessons to delete.
   * @example
   * // Delete a few Lessons
   * const { count } = await prisma.lesson.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LessonDeleteManyArgs>(
    args: Subset<T, LessonDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Lessons.
   * @param {LessonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Lessons
   * const lesson = await prisma.lesson.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LessonUpdateManyArgs>(
    args: Subset<T, LessonUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Lesson.
   * @param {LessonUpsertArgs} args - Arguments to update or create a Lesson.
   * @example
   * // Update or create a Lesson
   * const lesson = await prisma.lesson.upsert({
   *   create: {
   *     // ... data to create a Lesson
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lesson we want to update
   *   }
   * })
  **/
  upsert<T extends LessonUpsertArgs>(
    args: Subset<T, LessonUpsertArgs>
  ): CheckSelect<T, Prisma__LessonClient<Lesson>, Prisma__LessonClient<LessonGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyLessonArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateLessonArgs>(args: Subset<T, AggregateLessonArgs>): Promise<GetLessonAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Lesson.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__LessonClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Lesson findOne
 */
export type FindOneLessonArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * Filter, which Lesson to fetch.
  **/
  where: LessonWhereUniqueInput
}


/**
 * Lesson findFirst
 */
export type FindFirstLessonArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * Filter, which Lesson to fetch.
  **/
  where?: LessonWhereInput
  orderBy?: Enumerable<LessonOrderByInput> | LessonOrderByInput
  cursor?: LessonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LessonDistinctFieldEnum>
}


/**
 * Lesson findMany
 */
export type FindManyLessonArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * Filter, which Lessons to fetch.
  **/
  where?: LessonWhereInput
  /**
   * Determine the order of the Lessons to fetch.
  **/
  orderBy?: Enumerable<LessonOrderByInput> | LessonOrderByInput
  /**
   * Sets the position for listing Lessons.
  **/
  cursor?: LessonWhereUniqueInput
  /**
   * The number of Lessons to fetch. If negative number, it will take Lessons before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Lessons.
  **/
  skip?: number
  distinct?: Enumerable<LessonDistinctFieldEnum>
}


/**
 * Lesson create
 */
export type LessonCreateArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * The data needed to create a Lesson.
  **/
  data: LessonCreateInput
}


/**
 * Lesson update
 */
export type LessonUpdateArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * The data needed to update a Lesson.
  **/
  data: LessonUpdateInput
  /**
   * Choose, which Lesson to update.
  **/
  where: LessonWhereUniqueInput
}


/**
 * Lesson updateMany
 */
export type LessonUpdateManyArgs = {
  data: LessonUpdateManyMutationInput
  where?: LessonWhereInput
}


/**
 * Lesson upsert
 */
export type LessonUpsertArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * The filter to search for the Lesson to update in case it exists.
  **/
  where: LessonWhereUniqueInput
  /**
   * In case the Lesson found by the `where` argument doesn't exist, create a new Lesson with this data.
  **/
  create: LessonCreateInput
  /**
   * In case the Lesson was found with the provided `where` argument, update it with this data.
  **/
  update: LessonUpdateInput
}


/**
 * Lesson delete
 */
export type LessonDeleteArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
  /**
   * Filter which Lesson to delete.
  **/
  where: LessonWhereUniqueInput
}


/**
 * Lesson deleteMany
 */
export type LessonDeleteManyArgs = {
  where?: LessonWhereInput
}


/**
 * Lesson without action
 */
export type LessonArgs = {
  /**
   * Select specific fields to fetch from the Lesson
  **/
  select?: LessonSelect | null
}



/**
 * Model Exercise
 */

export type Exercise = {
  id: number
  title: string
  description: string
  url: string
  answer: string
  grade: number
}


export type AggregateExercise = {
  count: number
  avg: ExerciseAvgAggregateOutputType | null
  sum: ExerciseSumAggregateOutputType | null
  min: ExerciseMinAggregateOutputType | null
  max: ExerciseMaxAggregateOutputType | null
}

export type ExerciseAvgAggregateOutputType = {
  id: number
  grade: number
}

export type ExerciseSumAggregateOutputType = {
  id: number
  grade: number
}

export type ExerciseMinAggregateOutputType = {
  id: number
  grade: number
}

export type ExerciseMaxAggregateOutputType = {
  id: number
  grade: number
}


export type ExerciseAvgAggregateInputType = {
  id?: true
  grade?: true
}

export type ExerciseSumAggregateInputType = {
  id?: true
  grade?: true
}

export type ExerciseMinAggregateInputType = {
  id?: true
  grade?: true
}

export type ExerciseMaxAggregateInputType = {
  id?: true
  grade?: true
}

export type AggregateExerciseArgs = {
  where?: ExerciseWhereInput
  orderBy?: Enumerable<ExerciseOrderByInput> | ExerciseOrderByInput
  cursor?: ExerciseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ExerciseDistinctFieldEnum>
  count?: true
  avg?: ExerciseAvgAggregateInputType
  sum?: ExerciseSumAggregateInputType
  min?: ExerciseMinAggregateInputType
  max?: ExerciseMaxAggregateInputType
}

export type GetExerciseAggregateType<T extends AggregateExerciseArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetExerciseAggregateScalarType<T[P]>
}

export type GetExerciseAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ExerciseAvgAggregateOutputType ? ExerciseAvgAggregateOutputType[P] : never
}
    
    

export type ExerciseSelect = {
  id?: boolean
  title?: boolean
  description?: boolean
  url?: boolean
  answer?: boolean
  grade?: boolean
}

export type ExerciseGetPayload<
  S extends boolean | null | undefined | ExerciseArgs,
  U = keyof S
> = S extends true
  ? Exercise
  : S extends undefined
  ? never
  : S extends ExerciseArgs | FindManyExerciseArgs
  ? 'include' extends U
    ? Exercise 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Exercise ? Exercise[P]
: 
 never
    }
  : Exercise
: Exercise


export interface ExerciseDelegate {
  /**
   * Find zero or one Exercise that matches the filter.
   * @param {FindOneExerciseArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneExerciseArgs>(
    args: Subset<T, FindOneExerciseArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise | null>, Prisma__ExerciseClient<ExerciseGetPayload<T> | null>>
  /**
   * Find the first Exercise that matches the filter.
   * @param {FindFirstExerciseArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstExerciseArgs>(
    args: Subset<T, FindFirstExerciseArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise>, Prisma__ExerciseClient<ExerciseGetPayload<T>>>
  /**
   * Find zero or more Exercises that matches the filter.
   * @param {FindManyExerciseArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exercises
   * const exercises = await prisma.exercise.findMany()
   * 
   * // Get first 10 Exercises
   * const exercises = await prisma.exercise.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyExerciseArgs>(
    args?: Subset<T, FindManyExerciseArgs>
  ): CheckSelect<T, Promise<Array<Exercise>>, Promise<Array<ExerciseGetPayload<T>>>>
  /**
   * Create a Exercise.
   * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
   * @example
   * // Create one Exercise
   * const Exercise = await prisma.exercise.create({
   *   data: {
   *     // ... data to create a Exercise
   *   }
   * })
   * 
  **/
  create<T extends ExerciseCreateArgs>(
    args: Subset<T, ExerciseCreateArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise>, Prisma__ExerciseClient<ExerciseGetPayload<T>>>
  /**
   * Delete a Exercise.
   * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
   * @example
   * // Delete one Exercise
   * const Exercise = await prisma.exercise.delete({
   *   where: {
   *     // ... filter to delete one Exercise
   *   }
   * })
   * 
  **/
  delete<T extends ExerciseDeleteArgs>(
    args: Subset<T, ExerciseDeleteArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise>, Prisma__ExerciseClient<ExerciseGetPayload<T>>>
  /**
   * Update one Exercise.
   * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
   * @example
   * // Update one Exercise
   * const exercise = await prisma.exercise.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ExerciseUpdateArgs>(
    args: Subset<T, ExerciseUpdateArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise>, Prisma__ExerciseClient<ExerciseGetPayload<T>>>
  /**
   * Delete zero or more Exercises.
   * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
   * @example
   * // Delete a few Exercises
   * const { count } = await prisma.exercise.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ExerciseDeleteManyArgs>(
    args: Subset<T, ExerciseDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Exercises.
   * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exercises
   * const exercise = await prisma.exercise.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ExerciseUpdateManyArgs>(
    args: Subset<T, ExerciseUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Exercise.
   * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
   * @example
   * // Update or create a Exercise
   * const exercise = await prisma.exercise.upsert({
   *   create: {
   *     // ... data to create a Exercise
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exercise we want to update
   *   }
   * })
  **/
  upsert<T extends ExerciseUpsertArgs>(
    args: Subset<T, ExerciseUpsertArgs>
  ): CheckSelect<T, Prisma__ExerciseClient<Exercise>, Prisma__ExerciseClient<ExerciseGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyExerciseArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateExerciseArgs>(args: Subset<T, AggregateExerciseArgs>): Promise<GetExerciseAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Exercise.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ExerciseClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Exercise findOne
 */
export type FindOneExerciseArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * Filter, which Exercise to fetch.
  **/
  where: ExerciseWhereUniqueInput
}


/**
 * Exercise findFirst
 */
export type FindFirstExerciseArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * Filter, which Exercise to fetch.
  **/
  where?: ExerciseWhereInput
  orderBy?: Enumerable<ExerciseOrderByInput> | ExerciseOrderByInput
  cursor?: ExerciseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ExerciseDistinctFieldEnum>
}


/**
 * Exercise findMany
 */
export type FindManyExerciseArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * Filter, which Exercises to fetch.
  **/
  where?: ExerciseWhereInput
  /**
   * Determine the order of the Exercises to fetch.
  **/
  orderBy?: Enumerable<ExerciseOrderByInput> | ExerciseOrderByInput
  /**
   * Sets the position for listing Exercises.
  **/
  cursor?: ExerciseWhereUniqueInput
  /**
   * The number of Exercises to fetch. If negative number, it will take Exercises before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Exercises.
  **/
  skip?: number
  distinct?: Enumerable<ExerciseDistinctFieldEnum>
}


/**
 * Exercise create
 */
export type ExerciseCreateArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * The data needed to create a Exercise.
  **/
  data: ExerciseCreateInput
}


/**
 * Exercise update
 */
export type ExerciseUpdateArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * The data needed to update a Exercise.
  **/
  data: ExerciseUpdateInput
  /**
   * Choose, which Exercise to update.
  **/
  where: ExerciseWhereUniqueInput
}


/**
 * Exercise updateMany
 */
export type ExerciseUpdateManyArgs = {
  data: ExerciseUpdateManyMutationInput
  where?: ExerciseWhereInput
}


/**
 * Exercise upsert
 */
export type ExerciseUpsertArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * The filter to search for the Exercise to update in case it exists.
  **/
  where: ExerciseWhereUniqueInput
  /**
   * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
  **/
  create: ExerciseCreateInput
  /**
   * In case the Exercise was found with the provided `where` argument, update it with this data.
  **/
  update: ExerciseUpdateInput
}


/**
 * Exercise delete
 */
export type ExerciseDeleteArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
  /**
   * Filter which Exercise to delete.
  **/
  where: ExerciseWhereUniqueInput
}


/**
 * Exercise deleteMany
 */
export type ExerciseDeleteManyArgs = {
  where?: ExerciseWhereInput
}


/**
 * Exercise without action
 */
export type ExerciseArgs = {
  /**
   * Select specific fields to fetch from the Exercise
  **/
  select?: ExerciseSelect | null
}



/**
 * Model Progress
 */

export type Progress = {
  id: number
  user_id: number | null
  start_id: Date
  final_grade: number | null
  end_datetime: Date | null
}


export type AggregateProgress = {
  count: number
  avg: ProgressAvgAggregateOutputType | null
  sum: ProgressSumAggregateOutputType | null
  min: ProgressMinAggregateOutputType | null
  max: ProgressMaxAggregateOutputType | null
}

export type ProgressAvgAggregateOutputType = {
  id: number
  user_id: number | null
  final_grade: number | null
}

export type ProgressSumAggregateOutputType = {
  id: number
  user_id: number | null
  final_grade: number | null
}

export type ProgressMinAggregateOutputType = {
  id: number
  user_id: number | null
  final_grade: number | null
}

export type ProgressMaxAggregateOutputType = {
  id: number
  user_id: number | null
  final_grade: number | null
}


export type ProgressAvgAggregateInputType = {
  id?: true
  user_id?: true
  final_grade?: true
}

export type ProgressSumAggregateInputType = {
  id?: true
  user_id?: true
  final_grade?: true
}

export type ProgressMinAggregateInputType = {
  id?: true
  user_id?: true
  final_grade?: true
}

export type ProgressMaxAggregateInputType = {
  id?: true
  user_id?: true
  final_grade?: true
}

export type AggregateProgressArgs = {
  where?: ProgressWhereInput
  orderBy?: Enumerable<ProgressOrderByInput> | ProgressOrderByInput
  cursor?: ProgressWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProgressDistinctFieldEnum>
  count?: true
  avg?: ProgressAvgAggregateInputType
  sum?: ProgressSumAggregateInputType
  min?: ProgressMinAggregateInputType
  max?: ProgressMaxAggregateInputType
}

export type GetProgressAggregateType<T extends AggregateProgressArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProgressAggregateScalarType<T[P]>
}

export type GetProgressAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProgressAvgAggregateOutputType ? ProgressAvgAggregateOutputType[P] : never
}
    
    

export type ProgressSelect = {
  id?: boolean
  user?: boolean | UserArgs
  user_id?: boolean
  start_id?: boolean
  final_grade?: boolean
  end_datetime?: boolean
}

export type ProgressInclude = {
  user?: boolean | UserArgs
}

export type ProgressGetPayload<
  S extends boolean | null | undefined | ProgressArgs,
  U = keyof S
> = S extends true
  ? Progress
  : S extends undefined
  ? never
  : S extends ProgressArgs | FindManyProgressArgs
  ? 'include' extends U
    ? Progress  & {
      [P in TrueKeys<S['include']>]:
      P extends 'user'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Progress ? Progress[P]
: 
      P extends 'user'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : Progress
: Progress


export interface ProgressDelegate {
  /**
   * Find zero or one Progress that matches the filter.
   * @param {FindOneProgressArgs} args - Arguments to find a Progress
   * @example
   * // Get one Progress
   * const progress = await prisma.progress.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProgressArgs>(
    args: Subset<T, FindOneProgressArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress | null>, Prisma__ProgressClient<ProgressGetPayload<T> | null>>
  /**
   * Find the first Progress that matches the filter.
   * @param {FindFirstProgressArgs} args - Arguments to find a Progress
   * @example
   * // Get one Progress
   * const progress = await prisma.progress.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProgressArgs>(
    args: Subset<T, FindFirstProgressArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress>, Prisma__ProgressClient<ProgressGetPayload<T>>>
  /**
   * Find zero or more Progresses that matches the filter.
   * @param {FindManyProgressArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Progresses
   * const progresses = await prisma.progress.findMany()
   * 
   * // Get first 10 Progresses
   * const progresses = await prisma.progress.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const progressWithIdOnly = await prisma.progress.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProgressArgs>(
    args?: Subset<T, FindManyProgressArgs>
  ): CheckSelect<T, Promise<Array<Progress>>, Promise<Array<ProgressGetPayload<T>>>>
  /**
   * Create a Progress.
   * @param {ProgressCreateArgs} args - Arguments to create a Progress.
   * @example
   * // Create one Progress
   * const Progress = await prisma.progress.create({
   *   data: {
   *     // ... data to create a Progress
   *   }
   * })
   * 
  **/
  create<T extends ProgressCreateArgs>(
    args: Subset<T, ProgressCreateArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress>, Prisma__ProgressClient<ProgressGetPayload<T>>>
  /**
   * Delete a Progress.
   * @param {ProgressDeleteArgs} args - Arguments to delete one Progress.
   * @example
   * // Delete one Progress
   * const Progress = await prisma.progress.delete({
   *   where: {
   *     // ... filter to delete one Progress
   *   }
   * })
   * 
  **/
  delete<T extends ProgressDeleteArgs>(
    args: Subset<T, ProgressDeleteArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress>, Prisma__ProgressClient<ProgressGetPayload<T>>>
  /**
   * Update one Progress.
   * @param {ProgressUpdateArgs} args - Arguments to update one Progress.
   * @example
   * // Update one Progress
   * const progress = await prisma.progress.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProgressUpdateArgs>(
    args: Subset<T, ProgressUpdateArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress>, Prisma__ProgressClient<ProgressGetPayload<T>>>
  /**
   * Delete zero or more Progresses.
   * @param {ProgressDeleteManyArgs} args - Arguments to filter Progresses to delete.
   * @example
   * // Delete a few Progresses
   * const { count } = await prisma.progress.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProgressDeleteManyArgs>(
    args: Subset<T, ProgressDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Progresses.
   * @param {ProgressUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Progresses
   * const progress = await prisma.progress.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProgressUpdateManyArgs>(
    args: Subset<T, ProgressUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Progress.
   * @param {ProgressUpsertArgs} args - Arguments to update or create a Progress.
   * @example
   * // Update or create a Progress
   * const progress = await prisma.progress.upsert({
   *   create: {
   *     // ... data to create a Progress
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Progress we want to update
   *   }
   * })
  **/
  upsert<T extends ProgressUpsertArgs>(
    args: Subset<T, ProgressUpsertArgs>
  ): CheckSelect<T, Prisma__ProgressClient<Progress>, Prisma__ProgressClient<ProgressGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProgressArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProgressArgs>(args: Subset<T, AggregateProgressArgs>): Promise<GetProgressAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Progress.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProgressClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Progress findOne
 */
export type FindOneProgressArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * Filter, which Progress to fetch.
  **/
  where: ProgressWhereUniqueInput
}


/**
 * Progress findFirst
 */
export type FindFirstProgressArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * Filter, which Progress to fetch.
  **/
  where?: ProgressWhereInput
  orderBy?: Enumerable<ProgressOrderByInput> | ProgressOrderByInput
  cursor?: ProgressWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProgressDistinctFieldEnum>
}


/**
 * Progress findMany
 */
export type FindManyProgressArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * Filter, which Progresses to fetch.
  **/
  where?: ProgressWhereInput
  /**
   * Determine the order of the Progresses to fetch.
  **/
  orderBy?: Enumerable<ProgressOrderByInput> | ProgressOrderByInput
  /**
   * Sets the position for listing Progresses.
  **/
  cursor?: ProgressWhereUniqueInput
  /**
   * The number of Progresses to fetch. If negative number, it will take Progresses before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Progresses.
  **/
  skip?: number
  distinct?: Enumerable<ProgressDistinctFieldEnum>
}


/**
 * Progress create
 */
export type ProgressCreateArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * The data needed to create a Progress.
  **/
  data: ProgressCreateInput
}


/**
 * Progress update
 */
export type ProgressUpdateArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * The data needed to update a Progress.
  **/
  data: ProgressUpdateInput
  /**
   * Choose, which Progress to update.
  **/
  where: ProgressWhereUniqueInput
}


/**
 * Progress updateMany
 */
export type ProgressUpdateManyArgs = {
  data: ProgressUpdateManyMutationInput
  where?: ProgressWhereInput
}


/**
 * Progress upsert
 */
export type ProgressUpsertArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * The filter to search for the Progress to update in case it exists.
  **/
  where: ProgressWhereUniqueInput
  /**
   * In case the Progress found by the `where` argument doesn't exist, create a new Progress with this data.
  **/
  create: ProgressCreateInput
  /**
   * In case the Progress was found with the provided `where` argument, update it with this data.
  **/
  update: ProgressUpdateInput
}


/**
 * Progress delete
 */
export type ProgressDeleteArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
  /**
   * Filter which Progress to delete.
  **/
  where: ProgressWhereUniqueInput
}


/**
 * Progress deleteMany
 */
export type ProgressDeleteManyArgs = {
  where?: ProgressWhereInput
}


/**
 * Progress without action
 */
export type ProgressArgs = {
  /**
   * Select specific fields to fetch from the Progress
  **/
  select?: ProgressSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProgressInclude | null
}



/**
 * Deep Input Types
 */


export type UserWhereInput = {
  AND?: UserWhereInput | Enumerable<UserWhereInput>
  OR?: UserWhereInput | Enumerable<UserWhereInput>
  NOT?: UserWhereInput | Enumerable<UserWhereInput>
  id?: IntFilter | number
  email?: StringFilter | string
  name?: StringFilter | string
  password?: StringFilter | string
  progress?: ProgressRelationFilter | ProgressWhereInput
}

export type UserOrderByInput = {
  id?: SortOrder
  email?: SortOrder
  name?: SortOrder
  password?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
  email?: string
}

export type LessonWhereInput = {
  AND?: LessonWhereInput | Enumerable<LessonWhereInput>
  OR?: LessonWhereInput | Enumerable<LessonWhereInput>
  NOT?: LessonWhereInput | Enumerable<LessonWhereInput>
  id?: IntFilter | number
  title?: StringFilter | string
  description?: StringFilter | string
  url?: StringFilter | string
}

export type LessonOrderByInput = {
  id?: SortOrder
  title?: SortOrder
  description?: SortOrder
  url?: SortOrder
}

export type LessonWhereUniqueInput = {
  id?: number
}

export type ExerciseWhereInput = {
  AND?: ExerciseWhereInput | Enumerable<ExerciseWhereInput>
  OR?: ExerciseWhereInput | Enumerable<ExerciseWhereInput>
  NOT?: ExerciseWhereInput | Enumerable<ExerciseWhereInput>
  id?: IntFilter | number
  title?: StringFilter | string
  description?: StringFilter | string
  url?: StringFilter | string
  answer?: StringFilter | string
  grade?: IntFilter | number
}

export type ExerciseOrderByInput = {
  id?: SortOrder
  title?: SortOrder
  description?: SortOrder
  url?: SortOrder
  answer?: SortOrder
  grade?: SortOrder
}

export type ExerciseWhereUniqueInput = {
  id?: number
}

export type ProgressWhereInput = {
  AND?: ProgressWhereInput | Enumerable<ProgressWhereInput>
  OR?: ProgressWhereInput | Enumerable<ProgressWhereInput>
  NOT?: ProgressWhereInput | Enumerable<ProgressWhereInput>
  id?: IntFilter | number
  user?: UserRelationFilter | UserWhereInput | null
  user_id?: IntNullableFilter | number | null
  start_id?: DateTimeFilter | Date | string
  final_grade?: IntNullableFilter | number | null
  end_datetime?: DateTimeNullableFilter | Date | string | null
}

export type ProgressOrderByInput = {
  id?: SortOrder
  user_id?: SortOrder
  start_id?: SortOrder
  final_grade?: SortOrder
  end_datetime?: SortOrder
}

export type ProgressWhereUniqueInput = {
  id?: number
}

export type UserCreateInput = {
  email: string
  name: string
  password: string
  progress?: ProgressCreateOneWithoutUserInput
}

export type UserUpdateInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  progress?: ProgressUpdateOneRequiredWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type LessonCreateInput = {
  title: string
  description: string
  url: string
}

export type LessonUpdateInput = {
  title?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  url?: string | StringFieldUpdateOperationsInput
}

export type LessonUpdateManyMutationInput = {
  title?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  url?: string | StringFieldUpdateOperationsInput
}

export type ExerciseCreateInput = {
  title: string
  description: string
  url: string
  answer: string
  grade: number
}

export type ExerciseUpdateInput = {
  title?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  url?: string | StringFieldUpdateOperationsInput
  answer?: string | StringFieldUpdateOperationsInput
  grade?: number | IntFieldUpdateOperationsInput
}

export type ExerciseUpdateManyMutationInput = {
  title?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  url?: string | StringFieldUpdateOperationsInput
  answer?: string | StringFieldUpdateOperationsInput
  grade?: number | IntFieldUpdateOperationsInput
}

export type ProgressCreateInput = {
  start_id?: Date | string
  final_grade?: number | null
  end_datetime?: Date | string | null
  user?: UserCreateOneWithoutProgressInput
}

export type ProgressUpdateInput = {
  start_id?: Date | string | DateTimeFieldUpdateOperationsInput
  final_grade?: number | NullableIntFieldUpdateOperationsInput | null
  end_datetime?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  user?: UserUpdateOneWithoutProgressInput
}

export type ProgressUpdateManyMutationInput = {
  start_id?: Date | string | DateTimeFieldUpdateOperationsInput
  final_grade?: number | NullableIntFieldUpdateOperationsInput | null
  end_datetime?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type ProgressRelationFilter = {
  is?: ProgressWhereInput
  isNot?: ProgressWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type ProgressCreateOneWithoutUserInput = {
  create?: ProgressCreateWithoutUserInput
  connect?: ProgressWhereUniqueInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ProgressUpdateOneRequiredWithoutUserInput = {
  create?: ProgressCreateWithoutUserInput
  connect?: ProgressWhereUniqueInput
  update?: ProgressUpdateWithoutUserDataInput
  upsert?: ProgressUpsertWithoutUserInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type UserCreateOneWithoutProgressInput = {
  create?: UserCreateWithoutProgressInput
  connect?: UserWhereUniqueInput
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type UserUpdateOneWithoutProgressInput = {
  create?: UserCreateWithoutProgressInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutProgressDataInput
  upsert?: UserUpsertWithoutProgressInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date> | Enumerable<string> | null
  notIn?: Enumerable<Date> | Enumerable<string> | null
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type ProgressCreateWithoutUserInput = {
  start_id?: Date | string
  final_grade?: number | null
  end_datetime?: Date | string | null
}

export type ProgressUpdateWithoutUserDataInput = {
  start_id?: Date | string | DateTimeFieldUpdateOperationsInput
  final_grade?: number | NullableIntFieldUpdateOperationsInput | null
  end_datetime?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type ProgressUpsertWithoutUserInput = {
  update: ProgressUpdateWithoutUserDataInput
  create: ProgressCreateWithoutUserInput
}

export type UserCreateWithoutProgressInput = {
  email: string
  name: string
  password: string
}

export type UserUpdateWithoutProgressDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type UserUpsertWithoutProgressInput = {
  update: UserUpdateWithoutProgressDataInput
  create: UserCreateWithoutProgressInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
